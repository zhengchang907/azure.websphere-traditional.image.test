# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  azCliVersion: 2.6.0
  ref_javaee: 6addd99d8bc3f472e040f11c053a37e1ac370229
  offerName: azure.websphere-traditional.image
  userEmail: ${{ secrets.USER_EMAIL }}
  userName: ${{ secrets.USER_NAME }}
  ibmUserId: ${{ secrets.IBM_USER_ID }}
  ibmPassword: ${{ secrets.IBM_PASSWORD }}
  vmName: was${{ github.run_id }}${{ github.run_number }}
  vmAdminId: websphere
  vmAdminPassword: Secret123456
  storageResourceGroup: azure-websphere-image-rg
  storageAccountName: ${{ secrets.STORAGE_ACCOUNT_NAME }}
  storageContainerName: ${{ secrets.INSTALLER_CONTAINER_NAME }}
  vhdStorageAccountName: storage${{ github.run_id }}${{ github.run_number }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout azure-javaee-iaas
        uses: actions/checkout@v2
        with:
          repository: Azure/azure-javaee-iaas
          path: azure-javaee-iaas
          ref: ${{ env.ref_javaee }}  

      - name: Checkout arm-ttk
        uses: actions/checkout@v2
        with:
          repository: Azure/arm-ttk
          path: arm-ttk
          ref: ${{ env.ref_armttk }}
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: ${{ env.offerName }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build azure-javaee-iaas
        run: mvn -DskipTests clean install --file azure-javaee-iaas/pom.xml
      - name: Build and test
        run: mvn -Dgit.repo=${{ env.userName }} -Dgit.tag=1.0.1 -DibmUserId=${{ env.ibmUserId }} -DibmUserPwd=${{ env.ibmPassword }} -DvmName=${{ env.vmName }} -DvmAdminId=${{ env.vmAdminId }} -DvmAdminPwd=${{ env.vmAdminPassword }} -DdnsLabelPrefix=wsp -Dtest.args="-Test All" -Ptemplate-validation-tests clean install --file ${{ env.offerName }}/pom.xml
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Run deployment script
        run: |
          cd ${{ env.offerName }}/target/arm

          #Get a 4-hour SAS Token for the artifacts container. Fall back to OSX date syntax if Linux syntax fails.
          plusFourHoursUtc=$(date -u -v+4H +%Y-%m-%dT%H:%MZ 2>/dev/null)  || plusFourHoursUtc=$(date -u --date "$dte 4 hour" +%Y-%m-%dT%H:%MZ)

          #Generate SAS token
          sasToken=$( az storage container generate-sas -n ${{ env.storageContainerName }} --permissions r --expiry "$plusFourHoursUtc" --account-name ${{ env.storageAccountName }} --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} -o json | sed 's/"//g')
          blobEndpoint=$( az storage account show -n ${{ env.storageAccountName }} -g ${{ env.storageResourceGroup }} -o json | jq -r '.primaryEndpoints.blob' )
          echo $blobEndpoint

          installKitUri=${blobEndpoint}${{ env.storageContainerName }}/agent.installer.linux.gtk.x86_64_1.9.0.20190715_0328.zip?$sasToken
          
          echo $installKitUri

          #parameters JSON
          parametersJson=$( cat ./parameters.json | jq '.parameters' )
          parametersJson=$( echo "$parametersJson" | jq --arg uri "$installKitUri" '{"installKitUri": {"value":$uri}} + .' )
          parametersJson=$( echo "$parametersJson" | jq --arg storageAccount "${{ env.vhdStorageAccountName }}" '{"storageAccount": {"value":$storageAccount}} + .' )
          parametersJson=$( echo "$parametersJson" | jq -c '.' )

          echo $parametersJson

          #Start deployment
          echo "Starting deployment..."
          (
            az deployment group create --name ${{ github.run_id }}${{ github.run_number }} --resource-group ${{ env.storageResourceGroup }} \
              --template-file ./mainTemplate.json --parameters "$parametersJson"
          )

          if [[ $? -eq 0 ]]; then
            echo "Template has been successfully deployed"
          fi
      - name: Query public IP of VM
        id: query-vm-ip
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "query public ip"
            publicIP=$(az vm show \
              --resource-group ${{ env.storageResourceGroup }} \
              --name ${{ env.vmName }} -d \
              --query publicIps -o tsv)
            echo "##[set-output name=publicIP;]${publicIP}"
      - name: Create environment variable for VM
        id: env-vm-ip
        run: echo "wlsPublicIP=${{steps.query-vm-ip.outputs.publicIP}}" >> $GITHUB_ENV
      - name: Setup the deprovision using custom extension
        run: |
          echo "pubilc IP of VM: ${wlsPublicIP}"
          echo "Deprovision starts"
          echo install sshpass
          sudo apt-get install -y sshpass
          sshpass -p ${{ env.vmAdminPassword }} -v ssh -p 22 -o StrictHostKeyChecking=no -o ConnectTimeout=100 -v -tt ${{ env.vmAdminId }}@${wlsPublicIP} 'echo "${{ env.vmAdminPassword }}" | sudo -S waagent -deprovision+user -force -start'
      - name: Generate VM Image
        run: |
          az vm deallocate --resource-group ${{ env.storageResourceGroup }} --name ${{ env.vmName }}
          az vm generalize --resource-group ${{ env.storageResourceGroup }} --name ${{ env.vmName }}
          az image create --resource-group ${{ env.storageResourceGroup }} --name ${{ env.vmName }} --source ${{ env.vmName }}
      - name: Query vhd storage account access key
        id: query-vhd-access-key
        run: |
          key1=$(az storage account keys list --account-name ${{ env.vhdStorageAccountName }} --query "[?keyName=='key1'].value" -o tsv)
          echo $key1
          echo "##[set-output name=key1;]${key1}"
      - name: Create environment variable for vhd storage account access key
        id: env-vhd-access-key
        run: echo "vhdStorageAccountAccessKey=${{steps.query-vhd-access-key.key1}}" >> $GITHUB_ENV
      - name: Generate SAS
        id: generate-sas-uri
        run: |
          #Get a minus-24-hour SAS Token for the artifacts container. Fall back to OSX date syntax if Linux syntax fails.
          minus24HoursUtc=$(date -u --date "$dte -24 hour" +%Y-%m-%dT%H:%MZ)

          #Get a plus-24-hour SAS Token for the artifacts container. Fall back to OSX date syntax if Linux syntax fails.
          plus24HoursUtc=$(date -u --date "$dte 24 hour" +%Y-%m-%dT%H:%MZ)

          sasTokenForOffer=$(az storage container generate-sas --connection-string 'DefaultEndpointsProtocol=https;AccountName=${{ env.vhdStorageAccountName }};AccountKey=${vhdStorageAccountAccessKey};EndpointSuffix=core.windows.net' --name vhds --permissions rl --start "${minus24HoursUtc}" --expiry "${plus24HoursUtc}" -o tsv)
          echo $sasTokenForOffer

          blobStorageEndpoint=$(az storage account show --resource-group ${{ env.storageResourceGroup }} --name ${{ env.vhdStorageAccountName }} --query primaryEndpoints.blob -o tsv)
          echo $blobStorageEndpoint

          sasUri=$blobStorageEndpoint/vhds/${{ env.vmName }}.vhd?$sasTokenForOffer
          sasUri=$(echo ${sasUri} | sed 's,\/\/,\/,g')
          echo $sasUri
          echo "::set-output name=sasUri::$sasUri"
      - name: Create environment variable for VM SAS uri
        id: env-vm-sas-uri
        run: echo "vmSasUri=${{steps.generate-sas-uri.sasUri}}" >> $GITHUB_ENV
      - name: Deploy VM using image
        run: |
          az vm create --resource-group ${{ env.storageResourceGroup }} \
              --name targetVM${{ github.run_id }}${{ github.run_number }} \
              --image ${vmSasUri} \
              --specialized
              